package com.portfolio.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

    @Autowired
    @Qualifier("userDetails")
    UserDetailsService userDetails;
	
    @Bean
    public PasswordEncoder bCryptPasswordEncoder() {
        PasswordEncoder encoder = new BCryptPasswordEncoder();
        return encoder;
    }
    
    @Autowired
    public void configureGlobal(AuthenticationManagerBuilder builder) throws Exception {
        builder.userDetailsService(userDetails).passwordEncoder(bCryptPasswordEncoder());
    }

    protected void configure(HttpSecurity http) throws Exception {

    	http.csrf().disable().httpBasic().and()
        .authorizeRequests()
        .antMatchers("/css/**", "/imgs/**", "/js/**","/webjars/**", "/index", "/login" ).permitAll()
        .antMatchers("/admin/**").hasAuthority("ROLE_ADMIN")
        .and()
        .formLogin()
        .loginPage("/login")
        .usernameParameter("username")
        .passwordParameter("senha")
        .failureUrl("/login/error").permitAll()
        .defaultSuccessUrl("/index").permitAll()
        .and()
        .logout()
        .logoutUrl("/logout").logoutSuccessUrl("/login?logout")
        .invalidateHttpSession(true).deleteCookies("JSESSIONID");
    	
    }
    
}
